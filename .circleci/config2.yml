version: 2.1

commands:
  setup-toolchain:
    parameters:
        toolchain:
            type: string
    steps:
      - run:
          name: Install Toolchain
          command: |
            TOOLCHAIN_JSON='{
              "arm-clang": "https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases/download/release-17.0.1/LLVMEmbeddedToolchainForArm-17.0.1-Linux-x86_64.tar.xz",
              "arm-gcc": "https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v13.2.1-1.1/xpack-arm-none-eabi-gcc-13.2.1-1.1-linux-x64.tar.gz"
            }'
            toolchain_url=$(echo $TOOLCHAIN_JSON | jq -r '.["<< parameters.toolchain >>"]')
            echo "toolchain_url=$toolchain_url"
            # download and extract toolchain
            mkdir -p ~/cache/<< parameters.toolchain >>
            wget $toolchain_url -O toolchain.tar.gz
            tar -C ~/cache/<< parameters.toolchain >> -xaf toolchain.tar.gz
      - run:
          name: Setup build environment
          command: |
            echo "export PATH=$PATH:`echo ~/cache/<< parameters.toolchain >>/*/bin`" >> $BASH_ENV
            # Install Ninja
            NINJA_URL=https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux.zip
            wget $NINJA_URL -O ninja-linux.zip
            unzip ninja-linux.zip -d ~/bin

  get-deps:
    parameters:
      family:
        type: string
    steps:
      - run:
          name: Get Dependencies
          command: |
            python tools/get_deps.py << parameters.family >>

jobs:
  build:
    parameters:
      build-system:
        type: string
      toolchain:
        type: string
      family:
        type: string

    docker:
      - image: cimg/base:current
    resource_class: medium
    steps:
      - checkout
      - setup-toolchain:
          toolchain: << parameters.toolchain >>
      - get-deps:
          family: << parameters.family >>
      - run:
          name: Build
          command: |
            # Only build one board per family for non PRs i.e commit to master
            ONE_PER_FAMILY=""
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              ONE_PER_FAMILY="--one-per-family"
            fi
            python tools/build.py $ONE_PER_FAMILY -s << parameters.build-system >> --toolchain clang << parameters.family >>

workflows:
  build:
    jobs:
#      - build:
#          matrix:
#            parameters:
#              toolchain: ['arm-clang']
#              build-system: ['cmake']
#              family: ['imxrt']
#      - build:
#          matrix:
#            parameters:
#              toolchain: ['arm-gcc']
#              build-system: ['make']
#              family: ['stm32f1']
