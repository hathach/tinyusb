name: Build

on: [pull_request, push, repository_dispatch]

jobs:
  # Unit testing with Ceedling
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Ruby
      uses: actions/setup-ruby@v1
      
    - name: Checkout TinyUSB
      uses: actions/checkout@v2

    - name: Unit Tests
      run: |
        # Install Ceedling
        gem install ceedling
        cd test
        ceedling test:all

  # Build most of the ports
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example: ['board_test', 'cdc_dual_ports', 'cdc_msc', 'cdc_msc_freertos', 'dfu_rt', 
                  'hid_composite', 'hid_composite_freertos', 'hid_generic_inout', 'midi_test', 'msc_dual_lun', 'net_lwip_webserver',
                  'usbtmc', 'webusb_serial']
    steps:
    - name: Setup Python
      uses: actions/setup-python@v1

    - name: Setup Node.js
      uses: actions/setup-node@v1

    - name: Cache MSP430 Toolchain
      id: cache-msp430
      uses: actions/cache@v1
      with:
        path: /tmp/dl/
        # Increment serial number at end when updating downloads
        key: msp430-${{ runner.os }}-0

    - name: Install Toolchains
      run: |
        # ARM & RISC-V GCC from xpack
        npm install --global xpm
        xpm install --global @xpack-dev-tools/arm-none-eabi-gcc@latest
        xpm install --global @xpack-dev-tools/riscv-none-embed-gcc@latest
        echo "::add-path::`echo $HOME/opt/xPacks/@xpack-dev-tools/arm-none-eabi-gcc/*/.content/bin`"
        echo "::add-path::`echo $HOME/opt/xPacks/@xpack-dev-tools/riscv-none-embed-gcc/*/.content/bin`"

        # TI MSP430 GCC
        mkdir -p /tmp/dl/
        [ -f "/tmp/dl/msp430-gcc.tar.bz2" ] || wget --progress=dot:mega http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/8_3_0_0/exports/msp430-gcc-8.3.0.16_linux64.tar.bz2 -O /tmp/dl/msp430-gcc.tar.bz2
        tar -C $HOME -xaf /tmp/dl/msp430-gcc.tar.bz2
        echo "::add-path::`echo $HOME/msp430-gcc-*_linux64/bin`"

    - name: Checkout TinyUSB
      uses: actions/checkout@v2
      with:
        # Cannot do submodule checkout here since LWIP's git server cannot checkout unadventised commits (it must use tags)
        submodules: 'false'
        
    - name: Checkout Submodules
      run: |
        git submodule sync --recursive
        # Special case LWIP since GNU's Savannah can't do shallow checkout of non-tagged commits
        git submodule update --init --recursive lib/lwip
        git submodule update --init --recursive --depth 1

    - name: Build
      run: |
        python3 tools/build_all.py ${{ matrix.example }}

  # Build ESP32S
  build-esp32s:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Python
      uses: actions/setup-python@v1

    - name: Pull ESP-IDF docker
      run: docker pull espressif/idf:latest

    - name: Checkout TinyUSB
      uses: actions/checkout@v2
      with:
        submodules: 'false'

    - name: Build
      run: docker run --rm -v $PWD:/project -w /project espressif/idf:latest python3 tools/build_esp32s.py
