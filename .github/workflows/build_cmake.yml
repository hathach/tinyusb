name: Build CMake

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - 'test/hil/**'
      - 'tools/get_deps.py'
      - '.github/workflows/build_cmake.yml'
      - '.github/actions/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - 'test/hil/**'
      - 'tools/get_deps.py'
      - '.github/workflows/build_cmake.yml'
      - '.github/actions/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  arm-clang_url: "https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases/download/release-17.0.1/LLVMEmbeddedToolchainForArm-17.0.1-Linux-x86_64.tar.xz"
  msp43-gcc_url: "http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/9_2_0_0/export/msp430-gcc-9.2.0.50_linux64.tar.bz2"

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.set-matrix-json.outputs.matrix }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Checkout TinyUSB
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install click

      - name: Generate matrix json
        id: set-matrix-json
        run: |
          MATRIX_JSON=$(python tools/ci_set_matrix.py)
          echo "matrix=$MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  # ---------------------------------------
  # Build
  # ---------------------------------------
  build:
    needs: set-matrix
    uses: ./.github/workflows/build_family.yml
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - 'aarch64-gcc'
          - 'msp430-gcc'
    with:
      build-json: ${{ toJSON(fromJSON(needs.set-matrix.outputs.json)[matrix.port]) }}

  build-test:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - 'aarch64-gcc'
          - 'msp430-gcc'
    env:
      build_json: ${{ toJSON(fromJSON(needs.set-matrix.outputs.json)[matrix.port]) }}
    steps:
      - run: |
          echo "1: ${{ fromJSON(needs.set-matrix.outputs.json)[matrix.port] }}"
          echo "2: ${{ build_json }}"
          echo "3: ${{ fromJSON(build_json).family }}"

  # ---------------------------------------
  # Build ARM with GCC
  # ---------------------------------------
  arm-gcc:
    if: false
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        family: ${{ fromJSON(needs.set-matrix.outputs.json).arm-gcc.family }}
    steps:
      - name: Checkout TinyUSB
        uses: actions/checkout@v4

      - name: Install ARM GCC
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '12.3.Rel1'

      - name: Prepare to build
        uses: ./.github/actions/prepare_build
        with:
          family: ${{ matrix.family }}

      - name: Build
        run: python tools/build_cmake.py ${{ matrix.family }}

      - name: Upload Artifacts for Hardware Testing (rp2040)
        if: contains(matrix.family, 'rp2040') && github.repository_owner == 'hathach'
        uses: actions/upload-artifact@v4
        with:
          name: raspberry_pi_pico
          path: |
            cmake-build/cmake-build-raspberry_pi_pico/*/*/*.elf

      - name: Upload Artifacts for Hardware Testing (nRF)
        if: contains(matrix.family, 'nrf') && github.repository_owner == 'hathach'
        uses: actions/upload-artifact@v4
        with:
          name: feather_nrf52840_express
          path: |
            cmake-build/cmake-build-feather_nrf52840_express/*/*/*.elf

      - name: Upload Artifacts for Hardware Testing (samd51)
        if: contains(matrix.family, 'samd5x_e5x') && github.repository_owner == 'hathach'
        uses: actions/upload-artifact@v4
        with:
          name: itsybitsy_m4
          path: |
            cmake-build/cmake-build-itsybitsy_m4/*/*/*.bin

  # ---------------------------------------
  # Build ARM with Clang
  # ---------------------------------------
  arm-clang:
    if: false
    needs: set-matrix
    runs-on: ubuntu-latest
    env:
      toolchain_url: ${{ fromJSON(needs.set-matrix.outputs.json).arm-clang.toolchain_url }}
    strategy:
      fail-fast: false
      matrix:
         family: ${{ fromJSON(needs.set-matrix.outputs.json).arm-clang.family }}
    steps:
      - name: Checkout TinyUSB
        uses: actions/checkout@v4

      - name: Setup Toolchain
        uses: ./.github/actions/setup_toolchain
        with:
          toolchain_url: ${{ env.toolchain_url }}

      - name: Prepare to build
        uses: ./.github/actions/prepare_build
        with:
          family: ${{ matrix.family }}

      - name: Build
        run: python tools/build_cmake.py ${{ matrix.family }} -DTOOLCHAIN=clang

  # ---------------------------------------
  # Build MSP430 with GCC
  # ---------------------------------------
#  msp430-gcc:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        family:
#          - 'msp430'
#    steps:
#      - name: Checkout TinyUSB
#        uses: actions/checkout@v4
#
#      - name: Setup Toolchain
#        uses: ./.github/actions/setup_toolchain
#        with:
#          toolchain_url: ${{ env.msp43-gcc_url }}
#
#      - name: Prepare to build
#        uses: ./.github/actions/prepare_build
#        with:
#          family: ${{ matrix.family }}
#
#      - name: Build
#        run: python tools/build_cmake.py ${{ matrix.family }}

  # ---------------------------------------
  # Hardware in the loop (HIL)
  # Current self-hosted instance is running on an RPI4. For attached hardware checkout hil_pi4.json
  # ---------------------------------------
  hil-test:
    if: github.repository_owner == 'hathach' && false
    needs: arm-gcc
    runs-on: [self-hosted, rp2040, nrf52840, hardware-in-the-loop]
    strategy:
      fail-fast: false
      matrix:
        board:
          - 'feather_nrf52840_express'
          - 'itsybitsy_m4'
          - 'raspberry_pi_pico'
    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"

        # USB bus on rpi4 is not stable, reset it before testing
      - name: Reset USB bus
        run: |
          lsusb
          lsusb -t
          # reset VIA Labs 2.0 hub
          sudo usbreset 001/002

      - name: Checkout test/hil
        uses: actions/checkout@v4
        with:
          sparse-checkout: test/hil

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.board }}
          path: cmake-build/cmake-build-${{ matrix.board }}

      - name: Test on actual hardware
        run: |
          python3 test/hil/hil_test.py --board ${{ matrix.board }} hil_pi4.json
