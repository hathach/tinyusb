name: Hardware Test

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - 'test/hil/**'
      - 'tools/get_deps.py'
      - '.github/actions/**'
      - '.github/workflows/hil_test.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - 'test/hil/**'
      - 'tools/get_deps.py'
      - '.github/actions/**'
      - '.github/workflows/hil_test.yml'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: github.repository_owner == 'hathach'
    runs-on: ubuntu-latest
    outputs:
      BOARDS_ALL: ${{ steps.parse_hil_json.outputs.BOARDS_ALL }}
    steps:
      - name: Checkout TinyUSB
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Parse HIL json
        id: parse_hil_json
        run: |
          sudo apt install -y jq
          # BOARDS_ALL is all boards
          BOARDS_ALL=$(jq -r '.boards[] | "-b " + .name' test/hil/pi4.json | tr '\n' ' ')
          echo "BOARDS_ALL=$BOARDS_ALL"
          echo "BOARDS_ALL=$BOARDS_ALL" >> $GITHUB_OUTPUT
          echo "BOARDS_ALL=$BOARDS_ALL" >> $GITHUB_ENV

          # Non-Espresif boards
          BOARDS_NON_ESP=$(jq -r '.boards[] | select(.flasher != "esptool") | "-b " + .name' test/hil/pi4.json | tr '\n' ' ')
          echo "BOARDS_NON_ESP=$BOARDS_NON_ESP"
          echo "BOARDS_NON_ESP=$BOARDS_NON_ESP" >> $GITHUB_ENV

          # Espressif boards
          BOARDS_ESP=$(jq -r '.boards[] | select(.flasher == "esptool") | "-b " + .name' test/hil/pi4.json | tr '\n' ' ')
          echo "BOARDS_ESP=$BOARDS_ESP"
          echo "BOARDS_ESP=$BOARDS_ESP" >> $GITHUB_ENV

      - name: Setup ARM Toolchain
        uses: ./.github/actions/setup_toolchain
        with:
          toolchain: 'arm-gcc'

      - name: Setup ESP-IDF
        if: env.BOARDS_ESP != ''
        uses: ./.github/actions/setup_toolchain
        with:
          toolchain: 'esp-idf'
          toolchain_url: 'v5.1.1'

      - name: Get Dependencies
        uses: ./.github/actions/get_deps
        with:
          arg: ${{ env.BOARDS_ALL }}

      - name: Build
        run: python tools/build.py $BOARDS_NON_ESP

      - name: Build Espressif
        if: env.BOARDS_ESP != ''
        run: docker run --rm -v $PWD:/project -w /project espressif/idf:v5.1.1 python3 tools/build.py $BOARDS_ESP

      - name: Upload Artifacts for Hardware Testing
        uses: actions/upload-artifact@v4
        with:
          name: hil_pi4
          path: |
            cmake-build/cmake-build-*/*/*/*.elf
            cmake-build/cmake-build-*/*/*/*.bin
            # For Espressif
            cmake-build/cmake-build-*/*/*/bootloader/bootloader.bin
            cmake-build/cmake-build-*/*/*/partition_table/partition-table.bin
            cmake-build/cmake-build-*/*/*/config.env
            cmake-build/cmake-build-*/*/*/flash_args

  # ---------------------------------------
  # Hardware in the loop (HIL)
  # Current self-hosted instance is running on an RPI4. For attached hardware checkout hil_pi4.json
  # ---------------------------------------
  hil-pi4:
    if: github.repository_owner == 'hathach'
    needs: build
    runs-on: [self-hosted, rp2040, nrf52840, esp32s3, hardware-in-the-loop]
    env:
        BOARDS_ALL: ${{ needs.build.outputs.BOARDS_ALL }}
    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"

        # USB bus on rpi4 is not stable, reset it before testing
      - name: Reset USB bus
        run: |
          lsusb
          lsusb -t
          # reset VIA Labs 2.0 hub
          sudo usbreset 001/002

      - name: Checkout TinyUSB
        uses: actions/checkout@v4
        with:
          sparse-checkout: test/hil

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: hil_pi4
          path: cmake-build

      - name: Test on actual hardware
        run: |
          echo "BOARDS_ALL=$BOARDS_ALL"
          python3 test/hil/hil_test.py $BOARDS_ALL pi4.json
